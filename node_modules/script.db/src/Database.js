"use strict"

const fs = require('fs')
const path = require('path')
const { get, set, unset } = require('lodash')

class Database {
  constructor(file) {

    this._validarPath(file);

    this.file = file;

    this.data = {};

    this._verificarJSON();

    this.data = this._fetchData();
  }

  add(key, value) {
    return this._addOuSubtract('add', key, value);
  }

  clear() {
    this.data = {};
    this.save();
  }

  delete(key) {
    const deleted = unset(this.data, key);

    this.save();

    return deleted;
  }

  get(key) {

    const data = get(this.data, key);

    return data;
  }

  has(key) {
    return get(this.data, key) !== undefined;
  }

  save() {
    this._validarPath(this.file);
    try {
      fs.writeFileSync(this.file, JSON.stringify(this.data, null, 2));
    } catch (err) {
      if (err.code === 'ENOENT') throw new ReferenceError('The file does not exist.');
      else if (err.code === 'EACCES') throw new Error('The file cannot be accessed.');
    }
  }

  subtract(key, value) {
    return this._addOuSubtract('subtract', key, value);
  }

  set(key, value) {

    set(this.data, key, value);

    this.save();

    return get(this.data, key.split('.')[0]);
  }

  ping() {
    const read = this._get();
    const write = this._set();
    const average = (read + write) / 2;
    this.delete("evecloud")
    return {
      read: `${read}ms`,
      write: `${write}ms`,
      average: `${average}ms`
    };
  }

  _get() {
    const start = Date.now();
    this.get("evecloud");
    return Date.now() - start;
  }

  _set() {
    const start = Date.now();
    this.set("evecloud", "db");
    return Date.now() - start;
  }

  _addOuSubtract(operation, key, value) {
    let data = get(this.data, key);

    if (isNaN(value)) throw new TypeError('The value is not a number.');
    else if (!!data && typeof data !== 'number')
      throw new TypeError('The value from the key is not a number.');
    else if (!data) data = 0;

    set(this.data, key, operation === 'add' ? data + value : data - value);

    this.save();

    return get(this.data, key.split('.')[0]);
  }

  _verificarJSON() {
    try {
      const Content = fs.readFileSync(this.file, 'utf8');

      if (!Content || Array.isArray(JSON.parse(Content))) {
        this.data = {};
        this.save();
      }
    } catch (err) {
      if (err.code === 'ENOENT') throw new ReferenceError('The file does not exist.');
      else if (err.code === 'EACCES') throw new Error('The file cannot be accessed.');
    }
  }

  _fetchData() {
    try {
      return JSON.parse(fs.readFileSync(this.file, 'utf8'));
    } catch (err) {
      if (err.code === 'ENOENT') throw new ReferenceError('The file does not exist.');
      else if (err.code === 'EACCES') throw new Error('The file cannot be accessed.');
    }
  }

  _validarPath(file) {
    if (!file || !file.length) throw new Error('Missing file path.');
    else if (path.extname(file) !== '.json') throw new Error('Invalid file path');

    try {
      fs.lstatSync(file);
    } catch (err) {
      if (err.code === 'ENOENT') throw new ReferenceError('The file does not exist.');
      else if (err.code === 'EACCES') throw new Error('The file cannot be accessed.');
    }
  }

  toJSON() {
    return JSON.parse(JSON.stringify(this.data));
  }
}

module.exports = Database;